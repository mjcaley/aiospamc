variables:
  - name: POETRY_VIRTUALENVS_CREATE
    value: false

stages:
- stage: unittest
  displayName: Unit Tests
  dependsOn: []
  jobs:
  - job: Test
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      matrix:
        Python35:
          python.version: '3.5'
        Python36:
          python.version: '3.6'
        Python37:
          python.version: '3.7'
        Python38:
          python.version: '3.8'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
      displayName: 'Use Python $(python.version)'

    - script: |
        curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python
      displayName: 'Install Poetry'

    - script: |
        $HOME/.poetry/bin/poetry install
      displayName: 'Install dependencies'

    - script: |
        pytest tests/ --junit-xml="$BUILD_STAGINGDIRECTORY/test-results.xml" --cov aiospamc --cov-report="xml:$BUILD_STAGINGDIRECTORY/coverage.xml"
      displayName: 'pytest'

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: junit
        testResultsFiles: test-results.xml
        searchFolder: $(Build.StagingDirectory)

    - task: PublishCodeCoverageResults@1
      condition: succeededOrFailed()
      inputs:
        codeCoverageTool: cobertura
        summaryFileLocation: $(Build.StagingDirectory)/coverage.xml

- stage: integration
  displayName: Integration Tests
  dependsOn: []
  jobs:
    - job: Test
      pool:
       vmImage: 'ubuntu-latest'
      strategy:
       matrix:
         Python35:
           python.version: '3.5'
         Python36:
           python.version: '3.6'
         Python37:
           python.version: '3.7'
         Python38:
           python.version: '3.8'
      steps:
       - task: UsePythonVersion@0
         inputs:
           versionSpec: '$(python.version)'
         displayName: 'Use Python $(python.version)'

       - script: |
           sudo apt-get -y install spamassassin
         displayName: 'Install SpamAssassin'

       - script: |
           curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python
         displayName: 'Install Poetry'

       - script: |
           $HOME/.poetry/bin/poetry install
         displayName: 'Install dependencies'

       - script: |
           pytest tests/ -m integration --junit-xml="$BUILD_STAGINGDIRECTORY/test-results.xml" --cov aiospamc --cov-report="xml:$BUILD_STAGINGDIRECTORY/coverage.xml"
         displayName: 'pytest'

       - task: PublishTestResults@2
         inputs:
           testResultsFormat: junit
           testResultsFiles: test-results.xml
           searchFolder: $(Build.StagingDirectory)

- stage: publish
  displayName: Publish to PyPI
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  dependsOn: [unittest, integration]
  jobs:
  - job: Publish
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.8'

    - script: |
        curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python
      displayName: 'Install Poetry'

    - script: |
        $HOME/.poetry/bin/poetry publish --no-interaction --build -v
      displayName: 'Poetry publish'
      env:
        POETRY_PYPI_TOKEN_PYPI: '$(POETRY_PYPI_TOKEN_PYPI)'

    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/dist/'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'drop'

    - task: GitHubRelease@1
      inputs:
        gitHubConnection: 'Releases'
        repositoryName: '$(Build.Repository.Name)'
        action: 'create'
        target: '$(Build.SourceVersion)'
        tagSource: 'gitTag'
        changeLogCompareToRelease: 'lastFullRelease'
        changeLogType: 'commitBased'
