parameters:
- name: PythonVersion
  type: string

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: ${{ parameters.PythonVersion }}
  displayName: 'Use Python ${{ parameters.PythonVersion }}'

- script: |
    curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python
  displayName: 'Installing Poetry'

- script: |
    $HOME/.poetry/bin/poetry install
  displayName: 'Install dependencies'

- script: |
    pytest tests/ --junit-xml="$BUILD_STAGINGDIRECTORY/unit-test-results.xml" --cov aiospamc --cov-report="xml:$BUILD_STAGINGDIRECTORY/coverage.xml"
  displayName: 'Run unit tests'

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'junit'
    testResultsFiles: 'unit-test-results.xml'
    searchFolder: '$(Build.StagingDirectory)'

- task: PublishCodeCoverageResults@1
  condition: succeededOrFailed()
  inputs:
    codeCoverageTool: 'cobertura'
    summaryFileLocation: '$(Build.StagingDirectory)/coverage.xml'

- script: |
    sudo apt-get -y install spamassassin
  displayName: 'Install SpamAssassin'

- script: |
    pytest tests/ -m integration --junit-xml="$BUILD_STAGINGDIRECTORY/integration-test-results.xml" --cov aiospamc
  displayName: 'Run integration tests'

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'junit'
    testResultsFiles: 'integration-test-results.xml'
    searchFolder: '$(Build.StagingDirectory)'
